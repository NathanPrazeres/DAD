package dadkvs.server;

import java.util.ArrayList;
import java.util.Iterator;

/* these imported classes are generated by the hello-world-server contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsPaxos;
import dadkvs.DadkvsPaxosServiceGrpc;

import dadkvs.util.GenericResponseCollector;
import dadkvs.util.CollectorStreamObserver;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

public class MainLoop implements Runnable {
	DadkvsServerState serverState;

	private boolean hasWork;

	public MainLoop(DadkvsServerState state) {
		this.serverState = state;
		this.hasWork = false;
	}

	public void run() {
		while (true)
			this.doWork();
	}

	synchronized public void doWork() {
		System.out.println("Main loop do work start");
		this.hasWork = false;
		while (this.hasWork == false) {
			System.out.println("Main loop do work: waiting");
			try {
				wait();
			} catch (InterruptedException e) {
			}
		}

		// Debug mode based behavior
		// NOTE: eventually move this to its own class probably
		switch (serverState.debugMode) {
			case 0:
				// Normal mode
				System.out.println("Debug mode 0: Normal mode.");
				break;
			case 1:
				// Crash the server
				System.out.println("Debug mode 1: Crash the server.");
				// just brute forcing this for now
				System.exit(0);
				break;
			case 2:
				// Freeze the server
				System.out.println("Debug mode 2: Freeze the server.");
				this.serverState.frozen = true;
				break;
			case 3:
				// Un-freeze the server
				System.out.println("Debug mode 3: Un-freeze the server.");
				synchronized (this.serverState.freezeLock) {
					this.serverState.frozen = false;
					this.serverState.freezeLock.notifyAll();
				}
				break;
			case 4:
				// Slow mode on (insert random delay between request processing)
				System.out.println("Debug mode 4: Slow mode on");
				this.serverState.slowMode = true;
				break;
			case 5:
				// Slow mode off (remove random delay)
				System.out.println("Debug mode 5: Slow mode off");
				this.serverState.slowMode = false;
				break;
			default:
				System.out.println("Unknown debug mode: " + serverState.debugMode);
				break;
		}

		System.out.println("Main loop do work finish");
	}

	synchronized public void wakeup() {
		this.hasWork = true;
		notify();
	}
}
