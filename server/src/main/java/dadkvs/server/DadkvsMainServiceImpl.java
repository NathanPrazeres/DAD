package dadkvs.server;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;

import io.grpc.stub.StreamObserver;

public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {
	private DadkvsServerState _serverState;
	int timestamp;

	static final int SERVER_DELAY = 3000; // 3 seconds

	public DadkvsMainServiceImpl(DadkvsServerState state) {
		this._serverState = state;
		this.timestamp = 0;
	}

	public void trySleep() {
		try {
			Thread.sleep((int) (SERVER_DELAY * (Math.random() + 0.5))); // Median is SERVER_DELAY
		} catch (InterruptedException e) {
		}
	}

	public void checkConsoleRequest(int reqId) {
		if (reqId % 100 != 0) { // NOTE: its not a console request
			synchronized (_serverState.freezeLock) {
				while (_serverState.frozen) {
					try {
						_serverState.freezeLock.wait();
					} catch (InterruptedException e) {
					}
				}
			}
			if (_serverState.slowMode) {
				trySleep();
			}
		}
	}

	public void temp() {
		switch (_serverState.debugMode) {
			case 0:
				// Normal mode
				System.out.println("Debug mode 0: Normal mode.");
				break;
			case 1:
				// Crash the _server
				System.out.println("Debug mode 1: Crash the _server.");
				// just brute forcing for now
				System.exit(0);
				break;
			case 2:
				// Freeze the _server
				System.out.println("Debug mode 2: Freeze the _server.");
				_serverState.frozen = true;
				break;
			case 3:
				// Un-freeze the _server
				System.out.println("Debug mode 3: Un-freeze the _server.");
				synchronized (_serverState.freezeLock) {
					_serverState.frozen = false;
					_serverState.freezeLock.notifyAll();
				}
				break;
			case 4:
				// Slow mode on (in_sert random delay between request processing)
				System.out.println("Debug mode 4: Slow mode on");
				_serverState.slowMode = true;
				break;
			case 5:
				// Slow mode off (remove random delay)
				System.out.println("Debug mode 5: Slow mode off");
				_serverState.slowMode = false;
				break;
			default:
				System.out.println("Unknown debug mode: " + _serverState.debugMode);
				break;
		}
	}

	@Override
	public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
		// for debug purposes
		System.out.println("Receiving read request:" + request);
		_serverState.logSystem.writeLog("Receiving read request");

		int reqId = request.getReqid();
		int key = request.getKey();

		checkConsoleRequest(reqId);

		VersionedValue vv = _serverState.store.read(key);
		DadkvsMain.ReadReply response = DadkvsMain.ReadReply.newBuilder()
				.setReqid(reqId).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();

		responseObserver.onNext(response);
		responseObserver.onCompleted();
		_serverState.logSystem.writeLog("Read request completed");
	}

	@Override
	public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {
		_serverState.logSystem.writeLog("Received commit request");

		int reqId = request.getReqid();
		int key1 = request.getKey1();
		int version1 = request.getVersion1();
		int key2 = request.getKey2();
		int version2 = request.getVersion2();
		int writekey = request.getWritekey();
		int writeval = request.getWriteval();

		checkConsoleRequest(reqId);

		_serverState.paxosState.handleCommittx(reqId);

		// for debug purposes
		_serverState.logSystem
				.writeLog("reqId " + reqId + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2
						+ " wk " + writekey + " writeval " + writeval);
		System.out.println("reqId " + reqId + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2
				+ " wk " + writekey + " writeval " + writeval);

		_serverState.logSystem.writeLog("Waiting for sequence number");
		int seqNumber = _serverState.getSequenceNumber(reqId);
		_serverState.logSystem.writeLog("COMMITING: " + seqNumber);

		_serverState.waitInLine(seqNumber);
		timestamp++;

		TransactionRecord txrecord = new TransactionRecord(key1, version1, key2, version2, writekey, writeval, timestamp);

		boolean result = _serverState.store.commit(txrecord);

		DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
				.setReqid(reqId).setAck(result).build();

		_serverState.logSystem.writeLog(_serverState.store.toString());
		_serverState.nextInLine();

		responseObserver.onNext(response);
		responseObserver.onCompleted();
	}
}
